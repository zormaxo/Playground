using Microsoft.Extensions.DependencyInjection;

namespace SimpleMediatRPipeline;

class Program
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("=== MediatR Pipeline Demo with DI ===\n"); // DI Container setup
        var services = new ServiceCollection();

        // Handler'larÄ± kaydet
        services.AddScoped<IRequestHandler<GetUserQuery, User>, GetUserHandler>();
        services.AddScoped<IRequestHandler<CreateUserCommand, User>, CreateUserHandler>();

        // Behavior'larÄ± kaydet (sÄ±ralama Ã¶nemli!)
        services.AddScoped<IPipelineBehavior, LoggingBehavior>();
        services.AddScoped<IPipelineBehavior, ValidationBehavior>();
        services.AddScoped<IPipelineBehavior, PerformanceBehavior>();

        // Mediator'Ä± kaydet
        services.AddScoped<SimpleMediator>();

        var serviceProvider = services.BuildServiceProvider();

        // Mediator'Ä± DI'dan al
        var mediator = serviceProvider.GetRequiredService<SimpleMediator>();

        Console.WriteLine("ðŸš€ Åžimdi pipeline'Ä± Ã§alÄ±ÅŸÄ±rken gÃ¶relim:\n"); // Query Ã¶rneÄŸi
        Console.WriteLine("1. Query Execution:");
        var getUserQuery = new GetUserQuery { UserId = 1 };
        var user = await mediator.Send<GetUserQuery, User>(getUserQuery);
        Console.WriteLine($"Result: {user.Name} ({user.Email})\n");

        // Command Ã¶rneÄŸi
        Console.WriteLine("2. Command Execution:");
        var createUserCommand = new CreateUserCommand
        {
            Name = "Ahmet YÄ±lmaz",
            Email = "ahmet@example.com",
        };
        var newUser = await mediator.Send<CreateUserCommand, User>(createUserCommand);
        Console.WriteLine($"Created User: {newUser.Name} ({newUser.Email})\n");

        // HatalÄ± komut Ã¶rneÄŸi (validation fail)
        Console.WriteLine("3. Validation Error Example:");
        try
        {
            var invalidCommand = new CreateUserCommand
            {
                Name = "", // BoÅŸ isim - validation hatasÄ± verecek
                Email = "invalid-email",
            };
            await mediator.Send<CreateUserCommand, User>(invalidCommand);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}\n");
        }

        Console.WriteLine("âœ¨ Demo tamamlandÄ±! Pipeline'Ä±n nasÄ±l Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± gÃ¶rdÃ¼nÃ¼z.");
    }
}
